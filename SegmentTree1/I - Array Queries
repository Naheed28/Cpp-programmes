Given an array with N elements, indexed from 1 to N. Now you will be given some queries in the form I J, your task is to find 
the minimum value from index I to J.

Input
Input starts with an integer T (≤ 5), denoting the number of test cases.
The first line of a case is a blank line. The next line contains two integers N (1 ≤ N ≤ 105), q (1 ≤ q ≤ 50000). 
The next line contains N space separated integers forming the array. There integers range in [0, 105].

The next q lines will contain a query which is in the form I J (1 ≤ I ≤ J ≤ N).

Output
For each test case, print the case number in a single line. 
Then for each query you have to print a line containing the minimum value between index I and J.

Sample Input
2

5 3
78 1 22 12 3
1 2
3 5
4 4

1 1
10
1 1

Sample Output
Case 1:
1
3
12

Case 2:
10

Note
Dataset is huge. Use faster I/O methods.




                                    The code is given below
#include<iostream>
#include <bits/stdc++.h>

int arr[100005] ;
int tree[100005*4] ;



using namespace std ;

void  init(int node ,int b ,int e)  //for making a segment tree
{
    if(b == e)
    {
        tree[node] = arr[b] ;
        return ;
    }
    int left = node * 2 ;
    int right= (node * 2) + 1 ;
    int mid = (b + e) / 2 ;
    init(left , b, mid) ;
    init(right ,mid+1 ,e) ;
    tree[node] = min(tree[left] , tree[right]) ; //here we should return the min value


}
int finding_min(int node, int b, int e, int i, int j)//returning a min inside the range i  , j 
{
    if (i > e || j < b)
        return INT_MAX; //বাইরে চলে গিয়েছে//outside the range
    if (b >= i && e <= j)
        return tree[node]; //রিলেভেন্ট সেগমেন্ট //revlavent segment //
    
    int Left = node * 2; //আরো ভাঙতে হবে //if partial then it has to be broken 
    int Right = node * 2 + 1;
    int mid = (b + e) / 2;
    
    int p1 = finding_min(Left, b, mid, i, j);
    int p2 = finding_min(Right, mid + 1, e, i, j);
    return min(p1,p2) ; 
}


int main()
{
    int t ;
    scanf("%d" ,&t) ;

    for(int i = 0 ; i  < t ;i++)
    {
        memset(arr , 0 ,sizeof arr) ;
        memset(tree , 0 ,sizeof tree) ;
        
        int n , q ;
        scanf("%d %d" , &n ,&q) ;
        
        for(int i = 1 ; i<= n ;i++)
        {
            scanf("%d" ,&arr[i]) ;  //for getting the array of 1 based index

        }                         
        
        
        init(1 , 1 , n ) ;        //making a segment tree 
        printf("Case %d:\n" , i+1) ;
        for(int j = 0 ; j<q ;j++)
        {
            int a , b ;
            scanf("%d %d" ,&a ,&b) ;
            int x = finding_min(1 , 1 , n ,a , b);
            
            printf("%d\n" , x) ;
        }

    }


    return 0 ;
}


                                                      The End
