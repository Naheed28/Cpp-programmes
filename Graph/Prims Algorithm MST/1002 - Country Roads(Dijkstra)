I am going to my home. There are many cities and many bi-directional roads between them. The cities are numbered from 0 to n-1 and 
each road has a cost. There are m roads. You are given the number of my city t where I belong. Now from each city you have to find 
the minimum cost to go to my city. The cost is defined by the cost of the maximum road you have used to go to my city.

http://lightoj.com/data/problems/desc/1002/a.png

For example, in the above picture, if we want to go from 0 to 4, then we can choose

1)      0 - 1 - 4 which costs 8, as 8 (1 - 4) is the maximum road we used

2)      0 - 2 - 4 which costs 9, as 9 (0 - 2) is the maximum road we used

3)      0 - 3 - 4 which costs 7, as 7 (3 - 4) is the maximum road we used

So, our result is 7, as we can use 0 - 3 - 4.

Input
Input starts with an integer T (≤ 20), denoting the number of test cases.

Each case starts with a blank line and two integers n (1 ≤ n ≤ 500) and m (0 ≤ m ≤ 16000). The next m lines,
each will contain three integers u, v, w (0 ≤ u, v < n, u ≠ v, 1 ≤ w ≤ 20000) indicating that there is a road 
between u and v with cost w. Then there will be a single integer t (0 ≤ t < n). There can be multiple roads between two cities.

Output
For each case, print the case number first. Then for all the cities (from 0 to n-1) you have to print the cost. 
	If there is no such path, print 'Impossible'.

Sample Input
Output for Sample Input
2

 

5 6

0 1 5

0 1 4

2 1 3

3 0 7

3 4 6

3 1 8

1

 

5 4

0 1 5

0 1 4

2 1 3

3 4 7

1

Case 1:

4

0

3

7

7

Case 2:

4

0

3

Impossible

Impossible

Note
Dataset is huge, user faster I/O methods.
	
	
	
	
	
	Hint : here we will be using Dijkstras algorithm ...its close to prims for mst
	
	
Solution

/* Bismillahir Rahmanir Rahim
   Solution using Dijkstra algorithm.
*/
#include<bits/stdc++.h>
#define PII pair<int ,int>

using namespace std;
vector<PII>adj[1009];
int dis[1009], n;
bool vis[1009] ;




void dijkstra(int x)
{
    priority_queue <PII ,vector <PII> ,greater<PII>> q ;//for min heap
    for(int i = 0 ; i <= n ;i++)dis[i]=20001;
    
    dis[x] = 0;
    q.push({0,x});
    while (!q.empty()) 
    {
        int a = q.top().second; 
        q.pop();

        if (vis[a]) continue;
            vis[a] = true;
        for (auto u : adj[a]) 
        {
            int b = u.second, w = u.first;
            int temp = max(dis[a], w);
            if (temp< dis[b]) 
            {
            dis[b] = temp;
            q.push({dis[b],b});
            }
        }
    }
}

int main()
{
    int e, u, v, w, m, t, cs=1;
    cin >> t ;
    while(t--)
    {
        cin >> n >> e ;
        for(int i = 0 ; i < e ;i++)
        {
            cin >> u >> v >> w ;
            adj[u].push_back(make_pair(w,v)) ;
            adj[v].push_back(make_pair(w,u)) ;
            
        }
        cin >> m ;
        dijkstra(m);
        cout<<"Case "<<cs++<<":"<<endl;
        for(int i = 0 ; i < n ;i++)
        {
            if(dis[i]==20001)cout<<"Impossible"<<endl;
            else cout<<dis[i]<<endl;
        }
        for(int i = 0 ; i < n ;i++)
        {
            adj[i].clear();
            //cost[i].clear();
        }
        memset(dis , 0 , sizeof dis) ;
        memset(vis , false ,sizeof vis) ;
    }
    return 0;
}
