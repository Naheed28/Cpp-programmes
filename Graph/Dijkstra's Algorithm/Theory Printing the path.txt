C. Dijkstra?


You are given a weighted undirected graph. The vertices are enumerated from 1 to n. 
Your task is to find the shortest path between the vertex 1 and the vertex n.

Input
The first line contains two integers n and m (2 ≤ n ≤ 105, 0 ≤ m ≤ 105), where n is the 
number of vertices and m is the number of edges. Following m lines contain one edge each 
in form ai, bi and wi (1 ≤ ai, bi ≤ n, 1 ≤ wi ≤ 10^6), where ai, bi are edge endpoints 
and wi is the length of the edge.

It is possible that the graph has loops and multiple edges between pair of vertices.

Output
Write the only integer -1 in case of no path. Write the shortest path in opposite case. 
If there are many solutions, print any of them.

Examples
inputCopy
5 6
1 2 2
2 5 5
2 3 4
1 4 1
4 3 3
3 5 1
outputCopy
1 4 3 5 


Now the below code doesnt get accepted for case 28.I dont know the reason.
But its enough to get the idea

#include <iostream>
#include <bits/stdc++.h>
#define PII pair<long long, long long>
#define ll long long

using namespace std;

vector<PII> adj[10005];
bool vis[10005];
ll dis[10005], n, m;

ll p[100005]; // an  array for storing the path

//for min heap .It will take the smallest weight first
priority_queue<PII, vector<PII>, greater<PII>> q;

void dijkstra(ll x)
{

    //here ll_MAX can also be set
    //for this the minimum value will begiven priority
    for (ll i = 0; i <= n; i++)
        dis[i] = 1e18;

    dis[x] = 0;     //setting the initial distance to zero
    q.push({0, x}); //saving the weight in the first position because of the priority_queue
    while (!q.empty())
    {
        ll a = q.top().second;
        q.pop();

        if (vis[a])
            continue;
        vis[a] = true;
        for (auto u : adj[a])
        {
            ll b = u.second, w = u.first;

            if (dis[a] + w < dis[b])
            {
                dis[b] = dis[a] + w;

                p[b] = a; //here it means that b node can be visited from a

                q.push({dis[b], b});
            }
        }
    }
}

//a function for traversing the path
void f(ll n)
{
    if (n != 1)
        f(p[n]);
    cout << n << " ";
}

main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n >> m; // n = nodes , m = edges
    for (ll i = 0; i < m; i++)
    {
        ll u, v, w;
        cin >> u >> v >> w;
        adj[u].push_back({w, v}); //pushing the weight at the left inorder to be sorted
        adj[v].push_back({w, u});
    }
    dijkstra(1); //distance from source node ie. 1

    if (dis[n] == 1e18)
        cout << -1; //if the node is not visited or connected
    else
        f(n);
    return 0;
}




Another solution which gets accepted is given below
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int n, m, i, j, a, b, w, k, z;
ll d[100005], p[100005];
map<pair<ll, ll>, ll> mp;
priority_queue<ll> q;
vector<ll> v[100005];

void f(ll i)
{
    if (i != 1)
        f(p[i]);
    cout << i << ' ';
}

int main()
{
    cin >> n >> m;
    while (m--)
    {
        cin >> a >> b >> w;
        v[a].push_back(b);
        v[b].push_back(a);
        mp[{a, b}] = w;
        mp[{b, a}] = w;
    }

    for (i = 2; i <= n; i++)
        d[i] = 1e18;
    q.push(1);

    while (q.size())
    {
        k = q.top();
        q.pop();
        for (i = 0; i < v[k].size(); i++)
        {
            z = v[k][i];
            w = mp[{k, z}];
            if (d[k] + w < d[z])
            {
                d[z] = d[k] + w;
                p[z] = k;
                q.push(z);
            }
        }
    }

    if (d[n] == 1e18)
        return cout << -1, 0;
    f(n);
    return 0;
}


-------------------------The end---------------------------------------------
