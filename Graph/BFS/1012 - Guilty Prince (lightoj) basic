Once there was a king named Akbar. He had a son named Shahjahan. For an unforgivable reason the king wanted him to leave the kingdom.
Since he loved his son he decided his son would be banished in a new place. The prince became sad, but he followed his father's will.
In the way he found that the place was a combination of land and water. Since he didn't know how to swim, he was only able to move on 
the land. He didn't know how many places might be his destination. So, he asked your help.

For simplicity, you can consider the place as a rectangular grid consisting of some cells. A cell can be a land or can contain water. 
Each time the prince can move to a new cell from his current position if they share a side.

Now write a program to find the number of cells (unit land) he could reach including the cell he was living.

Input
Input starts with an integer T (â‰¤ 500), denoting the number of test cases.
Each case starts with a line containing two positive integers W and H; W and H are the numbers of cells in the x and y directions, 
respectively. W and H are not more than 20.
There will be H more lines in the data set, each of which includes W characters. Each character represents the status of a cell as 
follows.

1) '.' - land

2) '#' - water

3) '@' - initial position of prince (appears exactly once in a dataset)

Output
For each case, print the case number and the number of cells he can reach from the initial position (including it).

Sample Input
4
6 9
....#.
.....#
......
......
......
......
......
#@...#
.#..#.

11 9
.#.........
.#.#######.
.#.#.....#.
.#.#.###.#.
.#.#..@#.#.
.#.#####.#.
.#.......#.
.#########.
...........

11 6
..#..#..#..
..#..#..#..
..#..#..###
..#..#..#@.
..#..#..#..
..#..#..#..

7 7
..#.#..
..#.#..
###.###
...@...
###.###
..#.#..
..#.#..

Sample Output
Case 1: 45

Case 2: 59

Case 3: 6

Case 4: 13





                                    The code is given below
                                    
                                    
#include <iostream>
#include <bits/stdc++.h>

using namespace std ;
int dx[] = {-1 ,0 ,1 ,0 };
int dy[] = {0 , 1 ,0 ,-1};//directional array for movement

int cnt = 0 ;
int row = 0 , coloumn = 0 ;

char vis[22][22] ;

void display()//for testing purpose
{
    for(int i = 0 ; i < row ;i++)
    {
        for(int j = 0 ; j < coloumn ;j++)
        {
            cout << vis[i][j] << " " ;
        }
        cout << endl ;
    }
}

void bfs(int x  ,int y )
{
    vis[x][y] = '1' ;
    queue<pair<int ,int> > q ;
    q.push(make_pair(x , y)) ;
    
    while(!q.empty())
    {
        pair <int ,int > v ;
        v = q.front() ;
        q.pop() ; // poping the front element ;

        for(int i = 0 ; i < 4 ;i++)
        {
            int tx = v.first + dx[i] ;//for temporaryly storing neighbour cell cordinates ;
            int ty = v.second +dy[i] ;

            if(vis[tx][ty] != '1' && vis[tx][ty] != '#' && tx < row and tx >= 0 and ty < coloumn and ty >= 0 )
            {
                vis[tx][ty] = '1' ; //if not visited then 1
                cnt++ ;
                q.push(make_pair(tx , ty)) ;
            }
        }
    }
}

int main()
{
    int t ;
    cin >> t ;

    for(int i = 0 ; i <t ;i++)
    {
        cin >> coloumn >> row ;
        if(row == 0 and coloumn == 0)break;
        memset(vis , 0 ,sizeof(vis)) ;
        memset(d , 0 ,sizeof(d)) ;

        int startx , starty ; //for starting node
        for(int i = 0 ; i < row ;i++)
        {
            for(int j = 0 ; j <coloumn ;j++)
            {
                cin >> vis[i][j] ;   //inserting the values
                if(vis[i][j] == '@') //for extracting the starting position
                {
                    startx = i ;
                    starty = j ;
                }
            }
        }

        bfs(startx ,starty) ;
        printf("Case %d: %d\n",i+1 ,cnt+1) ;
        cnt = 0 ;
        
        //display() ;
    }
    return 0 ;
}


---------------------------------------------------------------The End---------------------------------------------------------

                                                



