LightOJ 1009 - Back to Underworld

The Vampires and Lykans are fighting each other to death. The war has become so fierce that, none
knows who will win. The humans want to know who will survive finally. But humans are afraid of
going to the battlefield.
So, they made a plan. They collected the information from the newspapers of Vampires and Lykans.
They found the information about all the dual fights. Dual fight means a fight between a Lykan and
a Vampire. They know the name of the dual fighters, but don't know which one of them is a
Vampire or a Lykan.
So, the humans listed all the rivals. They want to find the maximum possible number of Vampires or
Lykans.

Input :
Input starts with an integer T (≤ 10), denoting the number of test cases.
Each case contains an integer n (1 ≤ n ≤ 105), denoting the number of dual fights. Each of the next
n lines will contain two different integers u v (1 ≤ u, v ≤ 20000) denoting there was a fight between
u and v. No rival will be reported more than once.

Output
For each case, print the case number and the maximum possible members of any race.
Sample Input  :
2
2
1 2
2 3
3
1 2
2 3
4 2

Output:
Case 1: 2
Case 2: 3


Note:
Dataset is huge, use faster I/O methods


Analysis:

Consider a Graph as 1-2, 2-3, 2-4; if 1 is a vampire than 2 is lykan, as 2 is lykan so 3 and 4 will be vampire.
Now total vampires are 3 and lykan is 1, so maximum from this graph is 3. [1=3=4=vampire]

another graph is 5-6 and 6-7, 6-8. consider 5 is a vampire so 6 will be lykan.
as 6 is lykan than the all adjacent of 6 will be vampire, i mean, 7=8=vampire.
Now total vampires are 3 and lykan is 1, so maximum from this graph is 3.

And the Answer of this total Graph is 3 + 3 = 6; [As, Graphs are not connected]

Decision: If a node is Vampire than all of the adjacent of that node will be Lykan and if a node is Lykan
than all of the adjacent of that node will be Vampire, thats why i have represented them as two color black
and red. Black means Vampire and Red means Lykan, besides every time i have increased number of vampire and
lykans and finally add the maximum as graphs are not connected.
Bipertite theory..

*/

#include<bits/stdc++.h>


using namespace std ;

const int high = 20009;
const int BLACK = 1;
const int RED = 2;
const int WHITE = 0;

vector<int>adj[high];
int ans=0 , color[high] , vampire=0 , lykan=0;

void adj_clear()
{
    for(int i=0; i<high; i++)
    {
        adj[i].clear();
    }
}

void BFS(int s)
{
    queue<int>Q;
    color[s] = BLACK; // consider it as a vampire=black
    vampire++;
    Q.push(s);

    while(!Q.empty())
    {
        int u = Q.front();
        Q.pop();

        for(int i=0; i<adj[u].size(); i++)
        {
            int v = adj[u][i];

            if(color[v] == WHITE)
            {
                Q.push(v);

                if(color[u] == BLACK)
                {
                    color[v] = RED;
                    lykan++;
                }

                else
                {
                    color[v] = BLACK;
                    vampire++;
                }
            }
        }
    }
}


int main()
{
    int t , tc=0 , u , n , v , i=0;

    scanf("%d", &t);

    while(t--)
    {
        adj_clear();
        memset(color , 0 , sizeof color);

        vampire = 0;
        lykan = 0;
        ans = 0;

        scanf("%d", &n);

        for(i=0; i<n; i++)
        {
            scanf("%d %d", &u , &v);

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        for(i=0; i<high; i++)   //since the there can be multiple graphs
        {
            if(!adj[i].empty() and color[i] == WHITE)
            {
                vampire = 0;
                lykan = 0;

                BFS(i);

                ans += max(vampire , lykan);
            }
        }
        printf("Case %d: %d\n" , ++tc , ans);
    }

    return 0;
}
