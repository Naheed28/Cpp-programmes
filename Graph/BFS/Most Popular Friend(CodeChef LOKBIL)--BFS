Anna Hazare is a well known social activist in India.
On 5th April, 2011 he started "Lokpal Bill movement".

Chef is very excited about this movement. He is thinking of contributing to it. He gathers his cook-herd 
and starts thinking about how our community can contribute to this.

All of them are excited about this too, but no one could come up with any idea. Cooks were slightly
disappointed with this and went to consult their friends.

One of the geekiest friend gave them the idea of spreading knowledge through Facebook. But we do not 
want to spam people's wall. So our cook came up with the idea of dividing Facebook users into small
friend groups and then identify the most popular friend in each group and post on his / her wall. They 
started dividing users into groups of friends and identifying the most popular amongst them.

The notoriety of a friend is defined as the averaged distance from all the other friends in his / her group.
This measure considers the friend himself, and the trivial distance of '0' that he / she has with himself / herself.

The most popular friend in a group is the friend whose notoriety is least among all the friends in the group.

Distance between X and Y is defined as follows:

Minimum number of profiles that X needs to visit for reaching Y's profile(Including Y's profile). 
X can open only those profiles which are in the friend list of the current opened profile. For Example:

Suppose A is friend of B.
B has two friends C and D.
E is a friend of D.



Now, the distance between A and B is 1, A and C is 2, C and E is 3.



So, one of our smart cooks took the responsibility of identifying the most popular friend in each group 
and others will go to persuade them for posting. This cheeky fellow knows that he can release his burden 
by giving this task as a long contest problem.



Now, he is asking you to write a program to identify the most popular friend among all the friends in each group.
Also, our smart cook wants to know the average distance of everyone from the most popular friend.

Input
Friends in a group are labelled with numbers to hide their Facebook identity. The first line of input contains
the number of groups in which users are divided. First line of each group contains the number of friends that
belong to that group. ith line of each group contains the space separated friend list of 'i'. You are assured 
that each friend's profile can be accessed by the profile of every other friend by following some sequence of profile visits.

Output
Your output contains the most popular friend name label along with the average distance (space separated)
from all other friends (including himself / herself) in six digits of precision. There might be multiple
most popular friend, in that case output the friend labelled with least number.

Note:
Each person in a group have atleast one friend and he/she cannot be in his/her own friend list.
Number of friends in a group cannot be more than 100.
There are atmost 100 groups.

Example
Input:
1
6
3
5
1 4
3 5 6
2 4 6
4 5

Output:
4 1.166667


Hint :It’s quite simple, create a matrix of friends such that if ‘i’ is a friend of ‘j’ then 
friend[i][j] =1, else friend[i][j]=0. Now, run Breadth First Search on each friend to find the
distances of each friend from him. After finding this, calculate the average distance of everyone
from him. After calculating it for all, print the friend with the smallest average. Yes, he is the one.


Solution:

#include <bits/stdc++.h>

using namespace std;

vector<int> adj[105];
bool vis[105];
int dis[105];
int sum;

int nodes, edges;

void bfs(int s)
{
  queue<int> q;
  q.push(s);
  vis[s] = true;
  dis[s] = 0; //setting the intial distance to 0

  while (!q.empty())
  {
    int u = q.front();
    q.pop();
    for (int i = 0; i < adj[u].size(); i++)
    {
      int v = adj[u][i];
      if (vis[v] == false)
      {
        //incrementing the distance
        dis[v] = dis[u] + 1;
        vis[v] = true;
        sum += dis[v]; //total dis sum from the starting node
        q.push(v);
      }
    }
  }
}



int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;

  for (int i = 1; i <= t; i++) //test cases
  {
    cin >> nodes;
    string ch;
    getline(cin, ch); //for getting the garbage when enter is clicked

    for (int i = 1; i <= nodes; i++)
    {
      adj[i].clear();
      string s;
      getline(cin, s); //getting the input as line

      stringstream ss(s); //for breaking the words and putting it in the integet variable
      int v;
      while (ss >> v)
      {
        adj[i].push_back(v);
        adj[v].push_back(i);
      }
    }

    int mx = INT_MAX, n;

    for (int i = 1; i <= nodes; i++)
    {

      memset(vis, 0, nodes + 1);
      memset(dis, 0, nodes + 1);
      sum = 0;
      bfs(i);
      if (sum < mx)
      {
        mx = sum;
        n = i;
      }
    }

    double ans = (double)mx / (double)nodes;

    cout << n << " " << fixed << setprecision(6) << ans << "\n";
  }

  return 0;
}

----------------------------------------------------------The End---------------------------------------------------------------

