A group of commandos were assigned a critical task. They are to destroy an enemy head quarter. 
The enemy head quarter consists of several buildings and the buildings are connected by roads. 
The commandos must visit each building and place a bomb at the base of each building. They start 
their mission at the base of a particular building and from there they disseminate to reach each building.
The commandos must use the available roads to travel between buildings. Any of them can visit one building
after another, but they must all gather at a common place when their task in done. In this problem, you will
be given the description of different enemy headquarters. Your job is to determine the minimum time needed
to complete the mission. Each commando takes exactly one unit of time to move between buildings. You may 
assume that the time required to place a bomb is negligible. Each commando can carry unlimited number of
bombs and there is an unlimited supply of commando troops for the mission.

Input
Input starts with an integer T (≤50), denoting the number of test cases.

The first line of each case starts with a positive integer N (1 ≤ N ≤ 100), where N denotes the number of
buildings in the head quarter. The next line contains a positive integer R, where R is the number of roads
connecting two buildings. Each of the next R lines contain two distinct numbers u v (0 ≤ u, v < N), this 
means there is a road connecting building u to building v. The buildings are numbered from 0 to N-1. The
last line of each case contains two integers s d (0 ≤ s, d < N). Where s denotes the building from where
the mission starts and d denotes the building where they must meet. You may assume that two buildings will
be directly connected by at most one road. The input will be given such that, it will be possible to go
from any building to another by using one or more roads.

Output
For each case, print the case number and the minimum time required to complete the mission.

Sample Input
Output for Sample Input
2

4
3
0 1
2 1
1 3
0 3

2
1
0 1
1 0


Output:

Case 1: 4

Case 2: 1

 

PROBLEM SETTER: SHAMIM HAFIZ
SPECIAL THANKS: JANE ALAM JAN (DATASET, SOLUTION)



/*
Algorithm:Dijkstra algorithm(Bfs or dfs can also be used . But for learning purpose we have used dijkstra)

There is an unlimited supply of commando troops for the mission, so we can assign one commando
for destroying one building. So, the i'th commando have to:
1. Start from the building s and go to the i'th building
2. From the i'th building, go to building d
So, we have to calculate (shortest path from s to i) + (shortest path from d to i)
for all commandos, and find the maximum value among these.
*/

#include <iostream>
#include <bits/stdc++.h>
#define PII pair<int , int> 

using namespace std ;

vector<PII>adj[10005] ;
bool vis[10005] ;
int dis[10005]  , n , m ;

bool vis2[10005] ;
int dis2[10005] ;


void dijkstra1(int x)
{
    priority_queue <PII ,vector <PII> ,greater<PII>> q ;//for min heap
    for(int i = 0 ; i <= n ;i++)dis[i]=200001;//for this the minimum value will begiven priority
    
    dis[x] = 0;
    q.push({0,x});
    while (!q.empty()) 
    {
        int a = q.top().second; 
        q.pop();

        if (vis[a]) continue;
            vis[a] = true;
        for (auto u : adj[a]) 
        {
            int b = u.second, w = u.first;
            
            if (dis[a] + w < dis[b]) 
            {
            dis[b] = dis[a] + w ;
            q.push({dis[b],b});
            }
        }
    }
}
void dijkstra2(int x)
{
    priority_queue <PII ,vector <PII> ,greater<PII>> q ;//for min heap
    for(int i = 0 ; i <= n ;i++)dis2[i]=200001;//for this the minimum value will begiven priority
    
    dis2[x] = 0;
    q.push({0,x});
    while (!q.empty()) 
    {
        int a = q.top().second; 
        q.pop();

        if (vis2[a]) continue;
            vis2[a] = true;
        for (auto u : adj[a]) 
        {
            int b = u.second, w = u.first;
            
            if (dis2[a] + w < dis2[b]) 
            {
            dis2[b] = dis2[a] + w ;
            q.push({dis2[b],b});
            }
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int t ;
    cin >> t;
    for(int i = 0 ; i  < t ;i++)//no of test
    {
        cin >> n >> m ;
        for(int i =0 ; i < m ; i++)
        {
            int u , v;
            cin >> u >> v  ;
            adj[u].push_back({1 , v}) ;
            adj[v].push_back({1 , u}) ;

        }
        int s , d;
        cin >> s >> d ;
        dijkstra1(s) ;
        dijkstra2(d) ;
        cout<<"Case "<<i+1<<": ";
        int x= 0 ;
        for(int i = 0 ; i < n ;i++)
        {
            x = max(dis[i]+dis2[i] , x) ;
        }
        cout << x << endl ;
        

        for(int i = 0 ; i <= n ;i++)
        {
            adj[i].clear();
        
        }
        memset(dis, 0 , sizeof dis) ;
        memset(vis , false , sizeof vis) ;
        memset(dis2, 0 , sizeof dis2) ;
        memset(vis2 , false , sizeof vis2) ;
    }
    return 0 ;
}
